// ATD_on_C_and_CPP.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//### Задача: Управление библиотекой
//
//#### Описание :
//    Необходимо разработать систему для управления библиотекой, которая будет отслеживать книги, авторов, читателей, заказы и штрафы.
//
//    ### Структуры данных :
//
//1. * *Автор(Author) * *
//-Поля :
//    -`id` (уникальный идентификатор автора)
//    - `name` (имя автора)
//    - `birthdate` (дата рождения)
//    - `books` (список книг, написанных автором, представленный как массив объектов типа `Book`)
//
//        2. * *Книга(Book) * *
//        -Поля:
//-`id` (уникальный идентификатор книги)
//- `title` (название книги)
//- `author` (объект типа `Author`, представляющий автора книги)
//- `publishedYear` (год публикации)
//- `isAvailable` (флаг, указывающий, доступна ли книга для заказа)
//
//3. * *Читатель(Reader) * *
//-Поля:
//-`id` (уникальный идентификатор читателя)
//- `name` (имя читателя)
//- `email` (электронная почта)
//- `borrowedBooks` (список книг, взятых читателем, представленный как массив объектов типа `Book`)
//
//    4. * *Заказ(Order) * *
//    -Поля:
//-`id` (уникальный идентификатор заказа)
//- `reader` (объект типа `Reader`, представляющий читателя, сделавшего заказ)
//- `book` (объект типа `Book`, представляющий заказанную книгу)
//- `orderDate` (дата заказа)
//- `returnDate` (дата возврата, если книга уже возвращена)
//
//5. * *Штраф(Fine) * *
//-Поля:
//-`id` (уникальный идентификатор штрафа)
//- `reader` (объект типа `Reader`, которому назначен штраф)
//- `amount` (сумма штрафа)
//- `reason` (причина назначения штрафа, например, просрочка возврата книги)
//- `isPaid` (флаг, указывающий, оплачен ли штраф)
//
//### Взаимосвязи:
//-Каждая книга связана с одним автором, но один автор может иметь несколько книг.
//- Читатель может заказывать несколько книг, и каждая книга может быть заказана разными читателями.
//- Заказ связывает читателя и книгу, а также хранит информацию о дате заказа и возврата.
//- Штрафы назначаются читателям за просрочку возврата книг, что создает связь между читателем и штрафом.


#include <iostream>

int main()
{
    std::cout << "Hello World!\n";
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
